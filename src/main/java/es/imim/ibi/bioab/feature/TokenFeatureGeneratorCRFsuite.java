package es.imim.ibi.bioab.feature;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import org.backingdata.gateutils.GATEinit;
import org.backingdata.gateutils.generic.PropertyManager;
import org.backingdata.mlfeats.ext.CRFsuite;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;
import weka.filters.unsupervised.attribute.Remove;
import weka.filters.unsupervised.attribute.StringToNominal;

/**
 * Read the ARFF file (not FILTERED) generated by means of the {@link es.imim.ibi.bioab.feature.TokenFeatureGenerator} 
 * and generates the instance files useful to train CRFsuite sequence tagger models
 * 
 * @author Francesco Ronzano
 *
 */
public class TokenFeatureGeneratorCRFsuite {

	private static Logger logger = LoggerFactory.getLogger(TokenFeatureGeneratorCRFsuite.class);

	// ARFF file to initialize filter parameters since weka.filters.unsupervised.attribute.Discretize filters are used and
	// the discretization bins depend on the initial dataset that is filtered 
	private static String arffToInitFilter = "/path/to/arrf/file/to/init/weka/filters.arff";

	// Input ARFF file to filter and transform / store in CRFsuite format
	private static String inputArffToGenerateCRF = "/path/to/arrf/file/to/be/converted/to/crfsuite/file.arff";

	// Folder where to store the output CRFsuite file
	private static String outputFolder = "/path/to/output/folder/where/to/store/crfsuite/conversion/results";

	public static void main(String args[]) {

		// Set the full path of the configuration file of BioAB Miner
		PropertyManager.setPropertyFilePath("/home/ronzano/Desktop/Hackathon_PLN/BioAbMinerConfig.properties");
		
		// Init GATE
		try {
			GATEinit.initGate(PropertyManager.getProperty("gate.home"), PropertyManager.getProperty("gate.plugins"));
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		arffToInitFilter = "/home/ronzano/Desktop/Hackathon_PLN/ARFF_FILES/abbrv_v_BARR17_train_and_test_sentScop_true.arff";
		inputArffToGenerateCRF = "/home/ronzano/Desktop/Hackathon_PLN/ARFF_FILES/abbrv_v_BARR17_train_and_test_sentScop_true.arff";
		outputFolder = "/home/ronzano/Desktop/Hackathon_PLN/CRFsuite_FILES/";
		executeCRFsuiteGen();
	}

	public static Filter[] getFilterArrayForCRFsuite() throws Exception {
		Filter[] filtersArray = new Filter[9];
		Remove removeFilter = new Remove();
		removeFilter.setOptions(weka.core.Utils.splitOptions("-R 1,10-23,94-100"));
		filtersArray[0] = removeFilter;

		StringToNominal StringToNominalFilter1 = new StringToNominal();
		StringToNominalFilter1.setOptions(weka.core.Utils.splitOptions("-R 2-8"));
		filtersArray[1] = StringToNominalFilter1;

		StringToNominal StringToNominalFilter2 = new StringToNominal();
		StringToNominalFilter2.setOptions(weka.core.Utils.splitOptions("-R 58-64"));
		filtersArray[2] = StringToNominalFilter2;

		// Discretize num chars
		Discretize discretize_numCharsFiler = new Discretize();
		discretize_numCharsFiler.setOptions(weka.core.Utils.splitOptions("-F -B 5 -M -1.0 -R 9-15"));
		filtersArray[3] = discretize_numCharsFiler;

		// Discretize perc upperc
		Discretize discretize_PercUppercFiler = new Discretize();
		discretize_PercUppercFiler.setOptions(weka.core.Utils.splitOptions("-F -B 5 -M -1.0 -R 16-22"));
		filtersArray[4] = discretize_PercUppercFiler;

		// Discretize perc numeric
		Discretize discretize_PercNumericFiler = new Discretize();
		discretize_PercNumericFiler.setOptions(weka.core.Utils.splitOptions("-F -B 5 -M -1.0 -R 23-29"));
		filtersArray[5] = discretize_PercNumericFiler;

		// Discretize perc punct
		Discretize discretize_PercPunctFiler = new Discretize();
		discretize_PercPunctFiler.setOptions(weka.core.Utils.splitOptions("-F -B 5 -M -1.0 -R 30-36"));
		filtersArray[6] = discretize_PercPunctFiler;

		// Discretize repetitions
		Discretize discretize_RepetitionsFiler = new Discretize();
		discretize_RepetitionsFiler.setOptions(weka.core.Utils.splitOptions("-F -B 5 -M -1.0 -R 72-78"));
		filtersArray[7] = discretize_RepetitionsFiler;

		// Discretize wikiFreq
		Discretize discretize_WikiFreqFiler = new Discretize();
		discretize_WikiFreqFiler.setOptions(weka.core.Utils.splitOptions("-F -B 5 -M -1.0 -R 79-85"));
		filtersArray[8] = discretize_WikiFreqFiler;
		
		return filtersArray;
	}
	
	public static void executeCRFsuiteGen() {

		System.out.println("\n");
		System.out.println("**************************************************");
		System.out.println("Path to ARFF file used to init Weka filters : " + arffToInitFilter);
		System.out.println("Path to ARFF file to be converted to CRFsuite : " + inputArffToGenerateCRF);
		System.out.println("Path of the folder where conversion results are stored : " + outputFolder);
		System.out.println("**************************************************");


		// --- Filter ARFF for CRFsuite
		// Instantiate filters
		Instances ARFFinstancesFilteredCRFsuiteToInitFilter = null;
		MultiFilter multiFilter = new MultiFilter();
		try {
			
			multiFilter.setFilters(getFilterArrayForCRFsuite());

			// Load ARFF
			Instances ARFFinstancesToInitFilter = null;
			try {
				BufferedReader reader_training = new BufferedReader(new FileReader(arffToInitFilter));
				ARFFinstancesToInitFilter = new Instances(reader_training);
				logger.info("\nLoaded ARFF file (arffToInitFilter): " + arffToInitFilter + " ...");
				reader_training.close();
				ARFFinstancesToInitFilter.setClassIndex(ARFFinstancesToInitFilter.numAttributes() - 1);
			}
			catch (Exception e) {
				logger.info("\nError loading ARFF file: " + arffToInitFilter + " ---> " + e.getMessage());
				e.printStackTrace();
			}

			// Apply filter to init it
			multiFilter.setInputFormat(ARFFinstancesToInitFilter);
			ARFFinstancesFilteredCRFsuiteToInitFilter = Filter.useFilter(ARFFinstancesToInitFilter, multiFilter);
			ARFFinstancesFilteredCRFsuiteToInitFilter.setClassIndex(ARFFinstancesFilteredCRFsuiteToInitFilter.numAttributes() - 1);

		} catch (Exception e) {
			e.printStackTrace();
		}


		// Apply initialized filter if the set of ARFF instances to filter with initialized filter is different from the set of arff instances to init filter
		Instances ARFFinstancesToFilterWithInitializedFilter = null;
		Instances ARFFinstancesFilteredCRFsuite = null;
		if(!arffToInitFilter.equals(inputArffToGenerateCRF)) {
			try {
				BufferedReader reader_training = new BufferedReader(new FileReader(inputArffToGenerateCRF));
				ARFFinstancesToFilterWithInitializedFilter = new Instances(reader_training);
				logger.info("\nLoaded ARFF file (inputArffToGenerateCRF): " + inputArffToGenerateCRF + " ...");
				reader_training.close();
				ARFFinstancesToFilterWithInitializedFilter.setClassIndex(ARFFinstancesToFilterWithInitializedFilter.numAttributes() - 1);
			}
			catch (Exception e) {
				logger.info("\nError loading ARFF file: " + inputArffToGenerateCRF + " ---> " + e.getMessage());
				e.printStackTrace();
			}

			// Apply filter to init it
			try {
				ARFFinstancesFilteredCRFsuite = Filter.useFilter(ARFFinstancesToFilterWithInitializedFilter, multiFilter);
			} catch (Exception e) {
				e.printStackTrace();
			}
			ARFFinstancesFilteredCRFsuite.setClassIndex(ARFFinstancesFilteredCRFsuite.numAttributes() - 1);
		}
		else {
			ARFFinstancesFilteredCRFsuite = ARFFinstancesFilteredCRFsuiteToInitFilter;
		}
		
		
		
		File arffToInitFilterFile = new File(inputArffToGenerateCRF);
		String fileName = arffToInitFilterFile.getName();
		
		// --- STORE CRFsuite:
		logger.info("STORING CRFsuite (BOI SF)...");
		try {
			
			Remove removeFilter = new Remove();
			removeFilter.setOptions(weka.core.Utils.splitOptions("-R 87-88"));
			removeFilter.setInputFormat(ARFFinstancesFilteredCRFsuite);
			Instances ARFFinstancesFilteredCRFsuiteFILTERED = Filter.useFilter(ARFFinstancesFilteredCRFsuite, removeFilter);
			ARFFinstancesFilteredCRFsuiteFILTERED.setClassIndex(ARFFinstancesFilteredCRFsuiteFILTERED.numAttributes() - 1);
			
			File outputFile = new File(outputFolder + "BOI_SF_" + fileName.replace(".arff", ".crfstrain"));
			outputFile.createNewFile();

			// Conversion from ARFF
			CRFsuite.fromARFFtoCRFsuite(ARFFinstancesFilteredCRFsuiteFILTERED, "SENT_ID", true, outputFile.getAbsolutePath());
			// Conversion from featSet
			// FeatUtil.CRFsuiteInstanceGeneration(featSet, classIndex, sequenceGroupFeatureIndex, featuresIdToExclude, null, true, outputFile);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// --- STORE CRFsuite:
		logger.info("STORING CRFsuite (ABBRTYPE SF)...");
		try {
			
			Remove removeFilter = new Remove();
			removeFilter.setOptions(weka.core.Utils.splitOptions("-R 86,88"));
			removeFilter.setInputFormat(ARFFinstancesFilteredCRFsuite);
			Instances ARFFinstancesFilteredCRFsuiteFILTERED = Filter.useFilter(ARFFinstancesFilteredCRFsuite, removeFilter);
			ARFFinstancesFilteredCRFsuiteFILTERED.setClassIndex(ARFFinstancesFilteredCRFsuiteFILTERED.numAttributes() - 1);
			
			File outputFile = new File(outputFolder + "BOI_SF_ABBRTYPE_" + fileName.replace(".arff", ".crfstrain"));
			outputFile.createNewFile();

			// Conversion from ARFF
			CRFsuite.fromARFFtoCRFsuite(ARFFinstancesFilteredCRFsuiteFILTERED, "SENT_ID", true, outputFile.getAbsolutePath());
			// Conversion from featSet
			// FeatUtil.CRFsuiteInstanceGeneration(featSet, classIndex, sequenceGroupFeatureIndex, featuresIdToExclude, null, true, outputFile);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// --- STORE CRFsuite:
		logger.info("STORING CRFsuite (BOI LF)...");
		try {
			
			Remove removeFilter = new Remove();
			removeFilter.setOptions(weka.core.Utils.splitOptions("-R 86,87"));
			removeFilter.setInputFormat(ARFFinstancesFilteredCRFsuite);
			Instances ARFFinstancesFilteredCRFsuiteFILTERED = Filter.useFilter(ARFFinstancesFilteredCRFsuite, removeFilter);
			ARFFinstancesFilteredCRFsuiteFILTERED.setClassIndex(ARFFinstancesFilteredCRFsuiteFILTERED.numAttributes() - 1);
			
			File outputFile = new File(outputFolder + "BOI_LF_" + fileName.replace(".arff", ".crfstrain"));
			outputFile.createNewFile();

			// Conversion from ARFF
			CRFsuite.fromARFFtoCRFsuite(ARFFinstancesFilteredCRFsuiteFILTERED, "SENT_ID", true, outputFile.getAbsolutePath());
			// Conversion from featSet
			// FeatUtil.CRFsuiteInstanceGeneration(featSet, classIndex, sequenceGroupFeatureIndex, featuresIdToExclude, null, true, outputFile);
		} catch (Exception e) {
			e.printStackTrace();
		}

		logger.info("END PROCESSING");
	}

}
